package com.company;

import java.io.*;
import java.util.*;
import java.awt.BorderLayout;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.MenuItem;
import java.awt.TextArea;
// import java.awt.TextField;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

abstract public class Compile extends JFrame {
    protected TextArea rstDis;
    private TextArea comArea;
    private TextArea display;
    private JButton run, graSave, comSave;
    protected JTextField gra;
    private JLabel graLab, comLab;
    private JPanel gradArea, comPanel;
    private MenuBar bar;       // Menu bar
    private Menu fileMenu;
    private MenuItem openItem, nextItem, closeItem;
    private FileDialog openDia, nextDia;
    private File file;
    public static String dirpath, fileName;

    Compile() {

        rstDis = new TextArea();
        // run button
        run = new JButton("run");
        // grade area
        graLab = new JLabel("Grade");
        gra = new JTextField("", 2);
        graSave = new JButton("Save Grade");
        gradArea = new JPanel();
        gradArea.setLayout(new GridLayout(3,1));
        gradArea.add(graLab);
        gradArea.add(gra);
        gradArea.add(graSave);

        // comment area
        comLab = new JLabel("Comment: ");
        comArea = new TextArea();
        comSave = new JButton("Save Comment");
        comPanel = new JPanel();
        comPanel.setLayout(new GridLayout(3,1));
        comPanel.add(comLab);
        comPanel.add(comArea);
        comPanel.add(comSave);



        bar = new MenuBar(); //
        display = new TextArea();

        fileMenu = new Menu("file");// Initial menu

        openItem = new MenuItem("open");// create open item
        nextItem = new MenuItem("next");// create next item
        closeItem = new MenuItem("quit");

        fileMenu.add(openItem);
        fileMenu.add(nextItem);
        fileMenu.add(closeItem);

        bar.add(fileMenu);
        this.setMenuBar(bar);

        openDia = new FileDialog(this, "open", FileDialog.LOAD);
        nextDia = new FileDialog(this, "save", FileDialog.SAVE);

        this.setTitle("Automatic HomeWork");
        this.setBounds(300, 100, 650, 600);
        this.setLayout(new GridLayout(5,1));
        this.add(comPanel);
        this.add(display);
        this.add(run);
        this.add(rstDis);
        this.add(gradArea);
        this.setVisible(true);
        // this.setBounds(300, 100, 650, 600);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        this.setVisible(true);

        myEvent();
    }

    private void myEvent() {

        openItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                openDia.setVisible(true);

                dirpath = openDia.getDirectory();
                fileName = openDia.getFile();
                // System.out.println(dirpath);


                if (dirpath == null || fileName == null)
                    return;
                else
                    display.setText(null);
                file = new File(dirpath, fileName);

                try {
                    BufferedReader bufr = new BufferedReader(new FileReader(file));
                    String line = null;
                    while ((line = bufr.readLine()) != null) {
                        display.append(line + "\r\n");
                    }
                    bufr.close();
                } catch (FileNotFoundException e1) {
                    e1.printStackTrace();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }

                run.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        compile(dirpath, fileName, file);
                    }
                });

                graSave.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        String ss = gra.getText();
                        grade(ss, dirpath);
                    }
                });

                comSave.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        String ss = comArea.getText();
                        comment(ss, dirpath);
                    }
                });

            }

        });

        // next event listen;
        nextItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (file == null) {
                    nextDia.setVisible(true);
                    String dirpath = nextDia.getDirectory();
                    String fileName = nextDia.getFile();

                    if (dirpath == null || fileName == null)
                        return;
                    else
                        file=new File(dirpath,fileName);
                }
                try {
                    BufferedWriter bufw = new BufferedWriter(new FileWriter(file));

                    String text = display.getText();
                    bufw.write(text);

                    bufw.close();
                } catch (IOException e1) {

                    e1.printStackTrace();
                }
            }
        });

        closeItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });
    }
    abstract public void compile(String path, String fileName, File file);

    public void grade(String str, String path) {
        String name = "grade.txt";
        File file = new File(path, name);
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
            String str1 = str ;
            bw.write(str1);
            bw.newLine();
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void comment(String str, String path) {
        String name = "comment.txt";
        File file = new File(path, name);
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(file));
            String line = str;
            bw.write(str);
            bw.newLine();
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // return line;
    }
    public String peel(String str) {
        if (str == null)
            return str;
        int len = str.length();
        int i = str.indexOf('.');
        String rst = str.substring(0, i);
        String last = str.substring(i, len);
        return rst;
    }

    public static String peelL(String str) {
        if (str == null)
            return str;
        int len = str.length();
        int i = str.indexOf('.');
        String rst = str.substring(i, len);
        return rst;
    }

    public static void main(String[] args) throws IOException { //this is the test code, we could run it successfully.
        String suffix;
        suffix = peelL(dirpath);
        if (suffix.equals("java")) {
            CompileJava Java = new CompileJava();
        } else if (suffix.equals("cpp")) {
            CompileCpp Cpp = new CompileCpp();
        } else if (suffix.equals("py")) {
            CompilePython Python = new CompilePython();
        }
    }
}
